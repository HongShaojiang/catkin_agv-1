// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControllerMessage.proto

#include "ControllerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_AlarmMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AlarmMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AlarmMessage;
}  // namespace protobuf_AlarmMessage_2eproto
namespace protobuf_BMSMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BMSMessage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BmsMessage;
}  // namespace protobuf_BMSMessage_2eproto
namespace protobuf_ControllerMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ControllerMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerMessage_Dirver;
}  // namespace protobuf_ControllerMessage_2eproto
namespace protobuf_ErrorMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ErrorMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ErrorMessage;
}  // namespace protobuf_ErrorMessage_2eproto
namespace protobuf_ExternSensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ExternSensor_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ExternSensor;
}  // namespace protobuf_ExternSensor_2eproto
class ControllerMessage_DirverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerMessage_Dirver>
      _instance;
} _ControllerMessage_Dirver_default_instance_;
class ControllerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerMessage>
      _instance;
} _ControllerMessage_default_instance_;
namespace protobuf_ControllerMessage_2eproto {
static void InitDefaultsControllerMessage_Dirver() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ControllerMessage_Dirver_default_instance_;
    new (ptr) ::ControllerMessage_Dirver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControllerMessage_Dirver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerMessage_Dirver =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControllerMessage_Dirver}, {}};

static void InitDefaultsControllerMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ControllerMessage_default_instance_;
    new (ptr) ::ControllerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControllerMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ControllerMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsControllerMessage}, {
      &protobuf_ControllerMessage_2eproto::scc_info_ControllerMessage_Dirver.base,
      &protobuf_ExternSensor_2eproto::scc_info_ExternSensor.base,
      &protobuf_BMSMessage_2eproto::scc_info_BmsMessage.base,
      &protobuf_ErrorMessage_2eproto::scc_info_ErrorMessage.base,
      &protobuf_AlarmMessage_2eproto::scc_info_AlarmMessage.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerMessage_Dirver.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerMessage.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, device_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, device_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, actvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, setvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, ctrl_dc_voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, ctrl_ipm_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, actualpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, emergencyinputvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage_Dirver, actcurrent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage, dirvermessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage, sensormsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage, ctrl_device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage, bmsmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage, errormsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage, alarmmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage, linevelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerMessage, thvelocity_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ControllerMessage_Dirver)},
  { 15, -1, sizeof(::ControllerMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ControllerMessage_Dirver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ControllerMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ControllerMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027ControllerMessage.proto\032\022ExternSensor."
      "proto\032\020BMSMessage.proto\032\022ErrorMessage.pr"
      "oto\032\022AlarmMessage.proto\"\375\003\n\021ControllerMe"
      "ssage\022\014\n\004Stat\030\001 \001(\005\0220\n\rDirverMessage\030\002 \003"
      "(\0132\031.ControllerMessage.Dirver\022 \n\tSensorM"
      "sg\030\003 \001(\0132\r.ExternSensor\022\023\n\013ctrl_device\030\004"
      " \001(\005\022\033\n\006bmsMsg\030\005 \001(\0132\013.BmsMessage\022\037\n\010err"
      "ormsg\030\006 \001(\0132\r.ErrorMessage\022\037\n\010alarmmsg\030\007"
      " \001(\0132\r.AlarmMessage\022\024\n\014LineVelocity\030\t \001("
      "\002\022\022\n\nTHVelocity\030\n \001(\002\032\347\001\n\006Dirver\022\025\n\rdevi"
      "ce_status\030\001 \001(\005\022\022\n\ndevice_add\030\002 \001(\005\022\023\n\013A"
      "ctVelocity\030\003 \001(\005\022\023\n\013SetVelocity\030\004 \001(\005\022\027\n"
      "\017ctrl_dc_Voltage\030\005 \001(\002\022\034\n\024CTRL_IPM_TEMPE"
      "RATURE\030\006 \001(\002\022\021\n\tActualPos\030\007 \001(\005\022\033\n\023Emerg"
      "encyInputValue\030\010 \001(\010\022\r\n\005Error\030\t \001(\t\022\022\n\nA"
      "ctCurrent\030\013 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 623);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ControllerMessage.proto", &protobuf_RegisterTypes);
  ::protobuf_ExternSensor_2eproto::AddDescriptors();
  ::protobuf_BMSMessage_2eproto::AddDescriptors();
  ::protobuf_ErrorMessage_2eproto::AddDescriptors();
  ::protobuf_AlarmMessage_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ControllerMessage_2eproto

// ===================================================================

void ControllerMessage_Dirver::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerMessage_Dirver::kDeviceStatusFieldNumber;
const int ControllerMessage_Dirver::kDeviceAddFieldNumber;
const int ControllerMessage_Dirver::kActVelocityFieldNumber;
const int ControllerMessage_Dirver::kSetVelocityFieldNumber;
const int ControllerMessage_Dirver::kCtrlDcVoltageFieldNumber;
const int ControllerMessage_Dirver::kCTRLIPMTEMPERATUREFieldNumber;
const int ControllerMessage_Dirver::kActualPosFieldNumber;
const int ControllerMessage_Dirver::kEmergencyInputValueFieldNumber;
const int ControllerMessage_Dirver::kErrorFieldNumber;
const int ControllerMessage_Dirver::kActCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerMessage_Dirver::ControllerMessage_Dirver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ControllerMessage_2eproto::scc_info_ControllerMessage_Dirver.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControllerMessage.Dirver)
}
ControllerMessage_Dirver::ControllerMessage_Dirver(const ControllerMessage_Dirver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&device_status_, &from.device_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&actcurrent_) -
    reinterpret_cast<char*>(&device_status_)) + sizeof(actcurrent_));
  // @@protoc_insertion_point(copy_constructor:ControllerMessage.Dirver)
}

void ControllerMessage_Dirver::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actcurrent_) -
      reinterpret_cast<char*>(&device_status_)) + sizeof(actcurrent_));
}

ControllerMessage_Dirver::~ControllerMessage_Dirver() {
  // @@protoc_insertion_point(destructor:ControllerMessage.Dirver)
  SharedDtor();
}

void ControllerMessage_Dirver::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ControllerMessage_Dirver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerMessage_Dirver::descriptor() {
  ::protobuf_ControllerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControllerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerMessage_Dirver& ControllerMessage_Dirver::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ControllerMessage_2eproto::scc_info_ControllerMessage_Dirver.base);
  return *internal_default_instance();
}


void ControllerMessage_Dirver::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerMessage.Dirver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actcurrent_) -
      reinterpret_cast<char*>(&device_status_)) + sizeof(actcurrent_));
  _internal_metadata_.Clear();
}

bool ControllerMessage_Dirver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControllerMessage.Dirver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 device_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 device_add = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ActVelocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SetVelocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ctrl_dc_Voltage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctrl_dc_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CTRL_IPM_TEMPERATURE = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctrl_ipm_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ActualPos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool EmergencyInputValue = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergencyinputvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Error = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ControllerMessage.Dirver.Error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ActCurrent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &actcurrent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControllerMessage.Dirver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControllerMessage.Dirver)
  return false;
#undef DO_
}

void ControllerMessage_Dirver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControllerMessage.Dirver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 device_status = 1;
  if (this->device_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_status(), output);
  }

  // int32 device_add = 2;
  if (this->device_add() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->device_add(), output);
  }

  // int32 ActVelocity = 3;
  if (this->actvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actvelocity(), output);
  }

  // int32 SetVelocity = 4;
  if (this->setvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->setvelocity(), output);
  }

  // float ctrl_dc_Voltage = 5;
  if (this->ctrl_dc_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ctrl_dc_voltage(), output);
  }

  // float CTRL_IPM_TEMPERATURE = 6;
  if (this->ctrl_ipm_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ctrl_ipm_temperature(), output);
  }

  // int32 ActualPos = 7;
  if (this->actualpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->actualpos(), output);
  }

  // bool EmergencyInputValue = 8;
  if (this->emergencyinputvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->emergencyinputvalue(), output);
  }

  // string Error = 9;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControllerMessage.Dirver.Error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->error(), output);
  }

  // float ActCurrent = 11;
  if (this->actcurrent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->actcurrent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ControllerMessage.Dirver)
}

::google::protobuf::uint8* ControllerMessage_Dirver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControllerMessage.Dirver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 device_status = 1;
  if (this->device_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device_status(), target);
  }

  // int32 device_add = 2;
  if (this->device_add() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->device_add(), target);
  }

  // int32 ActVelocity = 3;
  if (this->actvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actvelocity(), target);
  }

  // int32 SetVelocity = 4;
  if (this->setvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->setvelocity(), target);
  }

  // float ctrl_dc_Voltage = 5;
  if (this->ctrl_dc_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ctrl_dc_voltage(), target);
  }

  // float CTRL_IPM_TEMPERATURE = 6;
  if (this->ctrl_ipm_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ctrl_ipm_temperature(), target);
  }

  // int32 ActualPos = 7;
  if (this->actualpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->actualpos(), target);
  }

  // bool EmergencyInputValue = 8;
  if (this->emergencyinputvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->emergencyinputvalue(), target);
  }

  // string Error = 9;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControllerMessage.Dirver.Error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->error(), target);
  }

  // float ActCurrent = 11;
  if (this->actcurrent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->actcurrent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerMessage.Dirver)
  return target;
}

size_t ControllerMessage_Dirver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerMessage.Dirver)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Error = 9;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // int32 device_status = 1;
  if (this->device_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->device_status());
  }

  // int32 device_add = 2;
  if (this->device_add() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->device_add());
  }

  // int32 ActVelocity = 3;
  if (this->actvelocity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actvelocity());
  }

  // int32 SetVelocity = 4;
  if (this->setvelocity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setvelocity());
  }

  // float ctrl_dc_Voltage = 5;
  if (this->ctrl_dc_voltage() != 0) {
    total_size += 1 + 4;
  }

  // float CTRL_IPM_TEMPERATURE = 6;
  if (this->ctrl_ipm_temperature() != 0) {
    total_size += 1 + 4;
  }

  // int32 ActualPos = 7;
  if (this->actualpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actualpos());
  }

  // bool EmergencyInputValue = 8;
  if (this->emergencyinputvalue() != 0) {
    total_size += 1 + 1;
  }

  // float ActCurrent = 11;
  if (this->actcurrent() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerMessage_Dirver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerMessage.Dirver)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerMessage_Dirver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerMessage_Dirver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerMessage.Dirver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerMessage.Dirver)
    MergeFrom(*source);
  }
}

void ControllerMessage_Dirver::MergeFrom(const ControllerMessage_Dirver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerMessage.Dirver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.device_status() != 0) {
    set_device_status(from.device_status());
  }
  if (from.device_add() != 0) {
    set_device_add(from.device_add());
  }
  if (from.actvelocity() != 0) {
    set_actvelocity(from.actvelocity());
  }
  if (from.setvelocity() != 0) {
    set_setvelocity(from.setvelocity());
  }
  if (from.ctrl_dc_voltage() != 0) {
    set_ctrl_dc_voltage(from.ctrl_dc_voltage());
  }
  if (from.ctrl_ipm_temperature() != 0) {
    set_ctrl_ipm_temperature(from.ctrl_ipm_temperature());
  }
  if (from.actualpos() != 0) {
    set_actualpos(from.actualpos());
  }
  if (from.emergencyinputvalue() != 0) {
    set_emergencyinputvalue(from.emergencyinputvalue());
  }
  if (from.actcurrent() != 0) {
    set_actcurrent(from.actcurrent());
  }
}

void ControllerMessage_Dirver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerMessage.Dirver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerMessage_Dirver::CopyFrom(const ControllerMessage_Dirver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerMessage.Dirver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerMessage_Dirver::IsInitialized() const {
  return true;
}

void ControllerMessage_Dirver::Swap(ControllerMessage_Dirver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerMessage_Dirver::InternalSwap(ControllerMessage_Dirver* other) {
  using std::swap;
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_status_, other->device_status_);
  swap(device_add_, other->device_add_);
  swap(actvelocity_, other->actvelocity_);
  swap(setvelocity_, other->setvelocity_);
  swap(ctrl_dc_voltage_, other->ctrl_dc_voltage_);
  swap(ctrl_ipm_temperature_, other->ctrl_ipm_temperature_);
  swap(actualpos_, other->actualpos_);
  swap(emergencyinputvalue_, other->emergencyinputvalue_);
  swap(actcurrent_, other->actcurrent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerMessage_Dirver::GetMetadata() const {
  protobuf_ControllerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControllerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerMessage::InitAsDefaultInstance() {
  ::_ControllerMessage_default_instance_._instance.get_mutable()->sensormsg_ = const_cast< ::ExternSensor*>(
      ::ExternSensor::internal_default_instance());
  ::_ControllerMessage_default_instance_._instance.get_mutable()->bmsmsg_ = const_cast< ::BmsMessage*>(
      ::BmsMessage::internal_default_instance());
  ::_ControllerMessage_default_instance_._instance.get_mutable()->errormsg_ = const_cast< ::ErrorMessage*>(
      ::ErrorMessage::internal_default_instance());
  ::_ControllerMessage_default_instance_._instance.get_mutable()->alarmmsg_ = const_cast< ::AlarmMessage*>(
      ::AlarmMessage::internal_default_instance());
}
void ControllerMessage::clear_sensormsg() {
  if (GetArenaNoVirtual() == NULL && sensormsg_ != NULL) {
    delete sensormsg_;
  }
  sensormsg_ = NULL;
}
void ControllerMessage::clear_bmsmsg() {
  if (GetArenaNoVirtual() == NULL && bmsmsg_ != NULL) {
    delete bmsmsg_;
  }
  bmsmsg_ = NULL;
}
void ControllerMessage::clear_errormsg() {
  if (GetArenaNoVirtual() == NULL && errormsg_ != NULL) {
    delete errormsg_;
  }
  errormsg_ = NULL;
}
void ControllerMessage::clear_alarmmsg() {
  if (GetArenaNoVirtual() == NULL && alarmmsg_ != NULL) {
    delete alarmmsg_;
  }
  alarmmsg_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerMessage::kStatFieldNumber;
const int ControllerMessage::kDirverMessageFieldNumber;
const int ControllerMessage::kSensorMsgFieldNumber;
const int ControllerMessage::kCtrlDeviceFieldNumber;
const int ControllerMessage::kBmsMsgFieldNumber;
const int ControllerMessage::kErrormsgFieldNumber;
const int ControllerMessage::kAlarmmsgFieldNumber;
const int ControllerMessage::kLineVelocityFieldNumber;
const int ControllerMessage::kTHVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerMessage::ControllerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ControllerMessage_2eproto::scc_info_ControllerMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControllerMessage)
}
ControllerMessage::ControllerMessage(const ControllerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dirvermessage_(from.dirvermessage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensormsg()) {
    sensormsg_ = new ::ExternSensor(*from.sensormsg_);
  } else {
    sensormsg_ = NULL;
  }
  if (from.has_bmsmsg()) {
    bmsmsg_ = new ::BmsMessage(*from.bmsmsg_);
  } else {
    bmsmsg_ = NULL;
  }
  if (from.has_errormsg()) {
    errormsg_ = new ::ErrorMessage(*from.errormsg_);
  } else {
    errormsg_ = NULL;
  }
  if (from.has_alarmmsg()) {
    alarmmsg_ = new ::AlarmMessage(*from.alarmmsg_);
  } else {
    alarmmsg_ = NULL;
  }
  ::memcpy(&stat_, &from.stat_,
    static_cast<size_t>(reinterpret_cast<char*>(&thvelocity_) -
    reinterpret_cast<char*>(&stat_)) + sizeof(thvelocity_));
  // @@protoc_insertion_point(copy_constructor:ControllerMessage)
}

void ControllerMessage::SharedCtor() {
  ::memset(&sensormsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thvelocity_) -
      reinterpret_cast<char*>(&sensormsg_)) + sizeof(thvelocity_));
}

ControllerMessage::~ControllerMessage() {
  // @@protoc_insertion_point(destructor:ControllerMessage)
  SharedDtor();
}

void ControllerMessage::SharedDtor() {
  if (this != internal_default_instance()) delete sensormsg_;
  if (this != internal_default_instance()) delete bmsmsg_;
  if (this != internal_default_instance()) delete errormsg_;
  if (this != internal_default_instance()) delete alarmmsg_;
}

void ControllerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerMessage::descriptor() {
  ::protobuf_ControllerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControllerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerMessage& ControllerMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ControllerMessage_2eproto::scc_info_ControllerMessage.base);
  return *internal_default_instance();
}


void ControllerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dirvermessage_.Clear();
  if (GetArenaNoVirtual() == NULL && sensormsg_ != NULL) {
    delete sensormsg_;
  }
  sensormsg_ = NULL;
  if (GetArenaNoVirtual() == NULL && bmsmsg_ != NULL) {
    delete bmsmsg_;
  }
  bmsmsg_ = NULL;
  if (GetArenaNoVirtual() == NULL && errormsg_ != NULL) {
    delete errormsg_;
  }
  errormsg_ = NULL;
  if (GetArenaNoVirtual() == NULL && alarmmsg_ != NULL) {
    delete alarmmsg_;
  }
  alarmmsg_ = NULL;
  ::memset(&stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thvelocity_) -
      reinterpret_cast<char*>(&stat_)) + sizeof(thvelocity_));
  _internal_metadata_.Clear();
}

bool ControllerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControllerMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ControllerMessage.Dirver DirverMessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dirvermessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ExternSensor SensorMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensormsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ctrl_device = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BmsMessage bmsMsg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bmsmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ErrorMessage errormsg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_errormsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AlarmMessage alarmmsg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alarmmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float LineVelocity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linevelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float THVelocity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControllerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControllerMessage)
  return false;
#undef DO_
}

void ControllerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControllerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Stat = 1;
  if (this->stat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stat(), output);
  }

  // repeated .ControllerMessage.Dirver DirverMessage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dirvermessage_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dirvermessage(static_cast<int>(i)),
      output);
  }

  // .ExternSensor SensorMsg = 3;
  if (this->has_sensormsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sensormsg(), output);
  }

  // int32 ctrl_device = 4;
  if (this->ctrl_device() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ctrl_device(), output);
  }

  // .BmsMessage bmsMsg = 5;
  if (this->has_bmsmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_bmsmsg(), output);
  }

  // .ErrorMessage errormsg = 6;
  if (this->has_errormsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_errormsg(), output);
  }

  // .AlarmMessage alarmmsg = 7;
  if (this->has_alarmmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_alarmmsg(), output);
  }

  // float LineVelocity = 9;
  if (this->linevelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->linevelocity(), output);
  }

  // float THVelocity = 10;
  if (this->thvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->thvelocity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ControllerMessage)
}

::google::protobuf::uint8* ControllerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControllerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Stat = 1;
  if (this->stat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stat(), target);
  }

  // repeated .ControllerMessage.Dirver DirverMessage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dirvermessage_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dirvermessage(static_cast<int>(i)), deterministic, target);
  }

  // .ExternSensor SensorMsg = 3;
  if (this->has_sensormsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sensormsg(), deterministic, target);
  }

  // int32 ctrl_device = 4;
  if (this->ctrl_device() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ctrl_device(), target);
  }

  // .BmsMessage bmsMsg = 5;
  if (this->has_bmsmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_bmsmsg(), deterministic, target);
  }

  // .ErrorMessage errormsg = 6;
  if (this->has_errormsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_errormsg(), deterministic, target);
  }

  // .AlarmMessage alarmmsg = 7;
  if (this->has_alarmmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_alarmmsg(), deterministic, target);
  }

  // float LineVelocity = 9;
  if (this->linevelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->linevelocity(), target);
  }

  // float THVelocity = 10;
  if (this->thvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->thvelocity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerMessage)
  return target;
}

size_t ControllerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ControllerMessage.Dirver DirverMessage = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dirvermessage_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dirvermessage(static_cast<int>(i)));
    }
  }

  // .ExternSensor SensorMsg = 3;
  if (this->has_sensormsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensormsg_);
  }

  // .BmsMessage bmsMsg = 5;
  if (this->has_bmsmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bmsmsg_);
  }

  // .ErrorMessage errormsg = 6;
  if (this->has_errormsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *errormsg_);
  }

  // .AlarmMessage alarmmsg = 7;
  if (this->has_alarmmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alarmmsg_);
  }

  // int32 Stat = 1;
  if (this->stat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stat());
  }

  // int32 ctrl_device = 4;
  if (this->ctrl_device() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ctrl_device());
  }

  // float LineVelocity = 9;
  if (this->linevelocity() != 0) {
    total_size += 1 + 4;
  }

  // float THVelocity = 10;
  if (this->thvelocity() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerMessage)
    MergeFrom(*source);
  }
}

void ControllerMessage::MergeFrom(const ControllerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dirvermessage_.MergeFrom(from.dirvermessage_);
  if (from.has_sensormsg()) {
    mutable_sensormsg()->::ExternSensor::MergeFrom(from.sensormsg());
  }
  if (from.has_bmsmsg()) {
    mutable_bmsmsg()->::BmsMessage::MergeFrom(from.bmsmsg());
  }
  if (from.has_errormsg()) {
    mutable_errormsg()->::ErrorMessage::MergeFrom(from.errormsg());
  }
  if (from.has_alarmmsg()) {
    mutable_alarmmsg()->::AlarmMessage::MergeFrom(from.alarmmsg());
  }
  if (from.stat() != 0) {
    set_stat(from.stat());
  }
  if (from.ctrl_device() != 0) {
    set_ctrl_device(from.ctrl_device());
  }
  if (from.linevelocity() != 0) {
    set_linevelocity(from.linevelocity());
  }
  if (from.thvelocity() != 0) {
    set_thvelocity(from.thvelocity());
  }
}

void ControllerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerMessage::CopyFrom(const ControllerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerMessage::IsInitialized() const {
  return true;
}

void ControllerMessage::Swap(ControllerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerMessage::InternalSwap(ControllerMessage* other) {
  using std::swap;
  CastToBase(&dirvermessage_)->InternalSwap(CastToBase(&other->dirvermessage_));
  swap(sensormsg_, other->sensormsg_);
  swap(bmsmsg_, other->bmsmsg_);
  swap(errormsg_, other->errormsg_);
  swap(alarmmsg_, other->alarmmsg_);
  swap(stat_, other->stat_);
  swap(ctrl_device_, other->ctrl_device_);
  swap(linevelocity_, other->linevelocity_);
  swap(thvelocity_, other->thvelocity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerMessage::GetMetadata() const {
  protobuf_ControllerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControllerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ControllerMessage_Dirver* Arena::CreateMaybeMessage< ::ControllerMessage_Dirver >(Arena* arena) {
  return Arena::CreateInternal< ::ControllerMessage_Dirver >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ControllerMessage* Arena::CreateMaybeMessage< ::ControllerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ControllerMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
