// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExternSensorConfig.proto

#include "ExternSensorConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ExternSensorConfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ExternSensorConfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExternSensorConfig_Config_Mode_fan;
}  // namespace protobuf_ExternSensorConfig_2eproto
class ExternSensorConfig_Config_Mode_fanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternSensorConfig_Config_Mode_fan>
      _instance;
} _ExternSensorConfig_Config_Mode_fan_default_instance_;
class ExternSensorConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternSensorConfig>
      _instance;
} _ExternSensorConfig_default_instance_;
namespace protobuf_ExternSensorConfig_2eproto {
static void InitDefaultsExternSensorConfig_Config_Mode_fan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExternSensorConfig_Config_Mode_fan_default_instance_;
    new (ptr) ::ExternSensorConfig_Config_Mode_fan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExternSensorConfig_Config_Mode_fan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExternSensorConfig_Config_Mode_fan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExternSensorConfig_Config_Mode_fan}, {}};

static void InitDefaultsExternSensorConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExternSensorConfig_default_instance_;
    new (ptr) ::ExternSensorConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExternSensorConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExternSensorConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExternSensorConfig}, {
      &protobuf_ExternSensorConfig_2eproto::scc_info_ExternSensorConfig_Config_Mode_fan.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ExternSensorConfig_Config_Mode_fan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExternSensorConfig.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExternSensorConfig_Config_Mode_fan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExternSensorConfig_Config_Mode_fan, fan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExternSensorConfig_Config_Mode_fan, fan_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExternSensorConfig_Config_Mode_fan, vaule_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExternSensorConfig_Config_Mode_fan, vaule_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExternSensorConfig_Config_Mode_fan, ctrl_switch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExternSensorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExternSensorConfig, led_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExternSensorConfig, config_fan_msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ExternSensorConfig_Config_Mode_fan)},
  { 10, -1, sizeof(::ExternSensorConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ExternSensorConfig_Config_Mode_fan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ExternSensorConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ExternSensorConfig.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030ExternSensorConfig.proto\"\331\001\n\022ExternSen"
      "sorConfig\022\021\n\tLed_Color\030\001 \001(\005\022;\n\016Config_f"
      "an_Msg\030\002 \003(\0132#.ExternSensorConfig.Config"
      "_Mode_fan\032s\n\017Config_Mode_fan\022\016\n\006fan_ID\030\001"
      " \001(\005\022\022\n\nfan_enable\030\002 \001(\005\022\022\n\nvaule_open\030\003"
      " \001(\002\022\023\n\013vaule_close\030\004 \001(\002\022\023\n\013Ctrl_switch"
      "\030\005 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 254);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExternSensorConfig.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ExternSensorConfig_2eproto

// ===================================================================

void ExternSensorConfig_Config_Mode_fan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternSensorConfig_Config_Mode_fan::kFanIDFieldNumber;
const int ExternSensorConfig_Config_Mode_fan::kFanEnableFieldNumber;
const int ExternSensorConfig_Config_Mode_fan::kVauleOpenFieldNumber;
const int ExternSensorConfig_Config_Mode_fan::kVauleCloseFieldNumber;
const int ExternSensorConfig_Config_Mode_fan::kCtrlSwitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternSensorConfig_Config_Mode_fan::ExternSensorConfig_Config_Mode_fan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ExternSensorConfig_2eproto::scc_info_ExternSensorConfig_Config_Mode_fan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExternSensorConfig.Config_Mode_fan)
}
ExternSensorConfig_Config_Mode_fan::ExternSensorConfig_Config_Mode_fan(const ExternSensorConfig_Config_Mode_fan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fan_id_, &from.fan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctrl_switch_) -
    reinterpret_cast<char*>(&fan_id_)) + sizeof(ctrl_switch_));
  // @@protoc_insertion_point(copy_constructor:ExternSensorConfig.Config_Mode_fan)
}

void ExternSensorConfig_Config_Mode_fan::SharedCtor() {
  ::memset(&fan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctrl_switch_) -
      reinterpret_cast<char*>(&fan_id_)) + sizeof(ctrl_switch_));
}

ExternSensorConfig_Config_Mode_fan::~ExternSensorConfig_Config_Mode_fan() {
  // @@protoc_insertion_point(destructor:ExternSensorConfig.Config_Mode_fan)
  SharedDtor();
}

void ExternSensorConfig_Config_Mode_fan::SharedDtor() {
}

void ExternSensorConfig_Config_Mode_fan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExternSensorConfig_Config_Mode_fan::descriptor() {
  ::protobuf_ExternSensorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ExternSensorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExternSensorConfig_Config_Mode_fan& ExternSensorConfig_Config_Mode_fan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ExternSensorConfig_2eproto::scc_info_ExternSensorConfig_Config_Mode_fan.base);
  return *internal_default_instance();
}


void ExternSensorConfig_Config_Mode_fan::Clear() {
// @@protoc_insertion_point(message_clear_start:ExternSensorConfig.Config_Mode_fan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctrl_switch_) -
      reinterpret_cast<char*>(&fan_id_)) + sizeof(ctrl_switch_));
  _internal_metadata_.Clear();
}

bool ExternSensorConfig_Config_Mode_fan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExternSensorConfig.Config_Mode_fan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fan_ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fan_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fan_enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fan_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vaule_open = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vaule_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vaule_close = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vaule_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Ctrl_switch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctrl_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExternSensorConfig.Config_Mode_fan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExternSensorConfig.Config_Mode_fan)
  return false;
#undef DO_
}

void ExternSensorConfig_Config_Mode_fan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExternSensorConfig.Config_Mode_fan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fan_ID = 1;
  if (this->fan_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fan_id(), output);
  }

  // int32 fan_enable = 2;
  if (this->fan_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fan_enable(), output);
  }

  // float vaule_open = 3;
  if (this->vaule_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->vaule_open(), output);
  }

  // float vaule_close = 4;
  if (this->vaule_close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->vaule_close(), output);
  }

  // float Ctrl_switch = 5;
  if (this->ctrl_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ctrl_switch(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ExternSensorConfig.Config_Mode_fan)
}

::google::protobuf::uint8* ExternSensorConfig_Config_Mode_fan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ExternSensorConfig.Config_Mode_fan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fan_ID = 1;
  if (this->fan_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fan_id(), target);
  }

  // int32 fan_enable = 2;
  if (this->fan_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fan_enable(), target);
  }

  // float vaule_open = 3;
  if (this->vaule_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->vaule_open(), target);
  }

  // float vaule_close = 4;
  if (this->vaule_close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->vaule_close(), target);
  }

  // float Ctrl_switch = 5;
  if (this->ctrl_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ctrl_switch(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExternSensorConfig.Config_Mode_fan)
  return target;
}

size_t ExternSensorConfig_Config_Mode_fan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExternSensorConfig.Config_Mode_fan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 fan_ID = 1;
  if (this->fan_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fan_id());
  }

  // int32 fan_enable = 2;
  if (this->fan_enable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fan_enable());
  }

  // float vaule_open = 3;
  if (this->vaule_open() != 0) {
    total_size += 1 + 4;
  }

  // float vaule_close = 4;
  if (this->vaule_close() != 0) {
    total_size += 1 + 4;
  }

  // float Ctrl_switch = 5;
  if (this->ctrl_switch() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternSensorConfig_Config_Mode_fan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExternSensorConfig.Config_Mode_fan)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternSensorConfig_Config_Mode_fan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExternSensorConfig_Config_Mode_fan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExternSensorConfig.Config_Mode_fan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExternSensorConfig.Config_Mode_fan)
    MergeFrom(*source);
  }
}

void ExternSensorConfig_Config_Mode_fan::MergeFrom(const ExternSensorConfig_Config_Mode_fan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExternSensorConfig.Config_Mode_fan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fan_id() != 0) {
    set_fan_id(from.fan_id());
  }
  if (from.fan_enable() != 0) {
    set_fan_enable(from.fan_enable());
  }
  if (from.vaule_open() != 0) {
    set_vaule_open(from.vaule_open());
  }
  if (from.vaule_close() != 0) {
    set_vaule_close(from.vaule_close());
  }
  if (from.ctrl_switch() != 0) {
    set_ctrl_switch(from.ctrl_switch());
  }
}

void ExternSensorConfig_Config_Mode_fan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExternSensorConfig.Config_Mode_fan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternSensorConfig_Config_Mode_fan::CopyFrom(const ExternSensorConfig_Config_Mode_fan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExternSensorConfig.Config_Mode_fan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternSensorConfig_Config_Mode_fan::IsInitialized() const {
  return true;
}

void ExternSensorConfig_Config_Mode_fan::Swap(ExternSensorConfig_Config_Mode_fan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternSensorConfig_Config_Mode_fan::InternalSwap(ExternSensorConfig_Config_Mode_fan* other) {
  using std::swap;
  swap(fan_id_, other->fan_id_);
  swap(fan_enable_, other->fan_enable_);
  swap(vaule_open_, other->vaule_open_);
  swap(vaule_close_, other->vaule_close_);
  swap(ctrl_switch_, other->ctrl_switch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExternSensorConfig_Config_Mode_fan::GetMetadata() const {
  protobuf_ExternSensorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ExternSensorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExternSensorConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternSensorConfig::kLedColorFieldNumber;
const int ExternSensorConfig::kConfigFanMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternSensorConfig::ExternSensorConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ExternSensorConfig_2eproto::scc_info_ExternSensorConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExternSensorConfig)
}
ExternSensorConfig::ExternSensorConfig(const ExternSensorConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      config_fan_msg_(from.config_fan_msg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  led_color_ = from.led_color_;
  // @@protoc_insertion_point(copy_constructor:ExternSensorConfig)
}

void ExternSensorConfig::SharedCtor() {
  led_color_ = 0;
}

ExternSensorConfig::~ExternSensorConfig() {
  // @@protoc_insertion_point(destructor:ExternSensorConfig)
  SharedDtor();
}

void ExternSensorConfig::SharedDtor() {
}

void ExternSensorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExternSensorConfig::descriptor() {
  ::protobuf_ExternSensorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ExternSensorConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExternSensorConfig& ExternSensorConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ExternSensorConfig_2eproto::scc_info_ExternSensorConfig.base);
  return *internal_default_instance();
}


void ExternSensorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ExternSensorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_fan_msg_.Clear();
  led_color_ = 0;
  _internal_metadata_.Clear();
}

bool ExternSensorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExternSensorConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Led_Color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &led_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_config_fan_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExternSensorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExternSensorConfig)
  return false;
#undef DO_
}

void ExternSensorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExternSensorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Led_Color = 1;
  if (this->led_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->led_color(), output);
  }

  // repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_fan_msg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->config_fan_msg(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ExternSensorConfig)
}

::google::protobuf::uint8* ExternSensorConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ExternSensorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Led_Color = 1;
  if (this->led_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->led_color(), target);
  }

  // repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_fan_msg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->config_fan_msg(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExternSensorConfig)
  return target;
}

size_t ExternSensorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExternSensorConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->config_fan_msg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->config_fan_msg(static_cast<int>(i)));
    }
  }

  // int32 Led_Color = 1;
  if (this->led_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->led_color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternSensorConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExternSensorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternSensorConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExternSensorConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExternSensorConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExternSensorConfig)
    MergeFrom(*source);
  }
}

void ExternSensorConfig::MergeFrom(const ExternSensorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExternSensorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_fan_msg_.MergeFrom(from.config_fan_msg_);
  if (from.led_color() != 0) {
    set_led_color(from.led_color());
  }
}

void ExternSensorConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExternSensorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternSensorConfig::CopyFrom(const ExternSensorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExternSensorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternSensorConfig::IsInitialized() const {
  return true;
}

void ExternSensorConfig::Swap(ExternSensorConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternSensorConfig::InternalSwap(ExternSensorConfig* other) {
  using std::swap;
  CastToBase(&config_fan_msg_)->InternalSwap(CastToBase(&other->config_fan_msg_));
  swap(led_color_, other->led_color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExternSensorConfig::GetMetadata() const {
  protobuf_ExternSensorConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ExternSensorConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ExternSensorConfig_Config_Mode_fan* Arena::CreateMaybeMessage< ::ExternSensorConfig_Config_Mode_fan >(Arena* arena) {
  return Arena::CreateInternal< ::ExternSensorConfig_Config_Mode_fan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ExternSensorConfig* Arena::CreateMaybeMessage< ::ExternSensorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::ExternSensorConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
