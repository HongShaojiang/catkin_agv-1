// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExternSensorConfig.proto

#ifndef PROTOBUF_INCLUDED_ExternSensorConfig_2eproto
#define PROTOBUF_INCLUDED_ExternSensorConfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ExternSensorConfig_2eproto 

namespace protobuf_ExternSensorConfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ExternSensorConfig_2eproto
class ExternSensorConfig;
class ExternSensorConfigDefaultTypeInternal;
extern ExternSensorConfigDefaultTypeInternal _ExternSensorConfig_default_instance_;
class ExternSensorConfig_Config_Mode_fan;
class ExternSensorConfig_Config_Mode_fanDefaultTypeInternal;
extern ExternSensorConfig_Config_Mode_fanDefaultTypeInternal _ExternSensorConfig_Config_Mode_fan_default_instance_;
namespace google {
namespace protobuf {
template<> ::ExternSensorConfig* Arena::CreateMaybeMessage<::ExternSensorConfig>(Arena*);
template<> ::ExternSensorConfig_Config_Mode_fan* Arena::CreateMaybeMessage<::ExternSensorConfig_Config_Mode_fan>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ExternSensorConfig_Config_Mode_fan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ExternSensorConfig.Config_Mode_fan) */ {
 public:
  ExternSensorConfig_Config_Mode_fan();
  virtual ~ExternSensorConfig_Config_Mode_fan();

  ExternSensorConfig_Config_Mode_fan(const ExternSensorConfig_Config_Mode_fan& from);

  inline ExternSensorConfig_Config_Mode_fan& operator=(const ExternSensorConfig_Config_Mode_fan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternSensorConfig_Config_Mode_fan(ExternSensorConfig_Config_Mode_fan&& from) noexcept
    : ExternSensorConfig_Config_Mode_fan() {
    *this = ::std::move(from);
  }

  inline ExternSensorConfig_Config_Mode_fan& operator=(ExternSensorConfig_Config_Mode_fan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternSensorConfig_Config_Mode_fan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternSensorConfig_Config_Mode_fan* internal_default_instance() {
    return reinterpret_cast<const ExternSensorConfig_Config_Mode_fan*>(
               &_ExternSensorConfig_Config_Mode_fan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ExternSensorConfig_Config_Mode_fan* other);
  friend void swap(ExternSensorConfig_Config_Mode_fan& a, ExternSensorConfig_Config_Mode_fan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternSensorConfig_Config_Mode_fan* New() const final {
    return CreateMaybeMessage<ExternSensorConfig_Config_Mode_fan>(NULL);
  }

  ExternSensorConfig_Config_Mode_fan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternSensorConfig_Config_Mode_fan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExternSensorConfig_Config_Mode_fan& from);
  void MergeFrom(const ExternSensorConfig_Config_Mode_fan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternSensorConfig_Config_Mode_fan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 fan_ID = 1;
  void clear_fan_id();
  static const int kFanIDFieldNumber = 1;
  ::google::protobuf::int32 fan_id() const;
  void set_fan_id(::google::protobuf::int32 value);

  // int32 fan_enable = 2;
  void clear_fan_enable();
  static const int kFanEnableFieldNumber = 2;
  ::google::protobuf::int32 fan_enable() const;
  void set_fan_enable(::google::protobuf::int32 value);

  // float vaule_open = 3;
  void clear_vaule_open();
  static const int kVauleOpenFieldNumber = 3;
  float vaule_open() const;
  void set_vaule_open(float value);

  // float vaule_close = 4;
  void clear_vaule_close();
  static const int kVauleCloseFieldNumber = 4;
  float vaule_close() const;
  void set_vaule_close(float value);

  // float Ctrl_switch = 5;
  void clear_ctrl_switch();
  static const int kCtrlSwitchFieldNumber = 5;
  float ctrl_switch() const;
  void set_ctrl_switch(float value);

  // @@protoc_insertion_point(class_scope:ExternSensorConfig.Config_Mode_fan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 fan_id_;
  ::google::protobuf::int32 fan_enable_;
  float vaule_open_;
  float vaule_close_;
  float ctrl_switch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ExternSensorConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExternSensorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ExternSensorConfig) */ {
 public:
  ExternSensorConfig();
  virtual ~ExternSensorConfig();

  ExternSensorConfig(const ExternSensorConfig& from);

  inline ExternSensorConfig& operator=(const ExternSensorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternSensorConfig(ExternSensorConfig&& from) noexcept
    : ExternSensorConfig() {
    *this = ::std::move(from);
  }

  inline ExternSensorConfig& operator=(ExternSensorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternSensorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternSensorConfig* internal_default_instance() {
    return reinterpret_cast<const ExternSensorConfig*>(
               &_ExternSensorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ExternSensorConfig* other);
  friend void swap(ExternSensorConfig& a, ExternSensorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternSensorConfig* New() const final {
    return CreateMaybeMessage<ExternSensorConfig>(NULL);
  }

  ExternSensorConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternSensorConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExternSensorConfig& from);
  void MergeFrom(const ExternSensorConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternSensorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExternSensorConfig_Config_Mode_fan Config_Mode_fan;

  // accessors -------------------------------------------------------

  // repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
  int config_fan_msg_size() const;
  void clear_config_fan_msg();
  static const int kConfigFanMsgFieldNumber = 2;
  ::ExternSensorConfig_Config_Mode_fan* mutable_config_fan_msg(int index);
  ::google::protobuf::RepeatedPtrField< ::ExternSensorConfig_Config_Mode_fan >*
      mutable_config_fan_msg();
  const ::ExternSensorConfig_Config_Mode_fan& config_fan_msg(int index) const;
  ::ExternSensorConfig_Config_Mode_fan* add_config_fan_msg();
  const ::google::protobuf::RepeatedPtrField< ::ExternSensorConfig_Config_Mode_fan >&
      config_fan_msg() const;

  // int32 Led_Color = 1;
  void clear_led_color();
  static const int kLedColorFieldNumber = 1;
  ::google::protobuf::int32 led_color() const;
  void set_led_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ExternSensorConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ExternSensorConfig_Config_Mode_fan > config_fan_msg_;
  ::google::protobuf::int32 led_color_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ExternSensorConfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExternSensorConfig_Config_Mode_fan

// int32 fan_ID = 1;
inline void ExternSensorConfig_Config_Mode_fan::clear_fan_id() {
  fan_id_ = 0;
}
inline ::google::protobuf::int32 ExternSensorConfig_Config_Mode_fan::fan_id() const {
  // @@protoc_insertion_point(field_get:ExternSensorConfig.Config_Mode_fan.fan_ID)
  return fan_id_;
}
inline void ExternSensorConfig_Config_Mode_fan::set_fan_id(::google::protobuf::int32 value) {
  
  fan_id_ = value;
  // @@protoc_insertion_point(field_set:ExternSensorConfig.Config_Mode_fan.fan_ID)
}

// int32 fan_enable = 2;
inline void ExternSensorConfig_Config_Mode_fan::clear_fan_enable() {
  fan_enable_ = 0;
}
inline ::google::protobuf::int32 ExternSensorConfig_Config_Mode_fan::fan_enable() const {
  // @@protoc_insertion_point(field_get:ExternSensorConfig.Config_Mode_fan.fan_enable)
  return fan_enable_;
}
inline void ExternSensorConfig_Config_Mode_fan::set_fan_enable(::google::protobuf::int32 value) {
  
  fan_enable_ = value;
  // @@protoc_insertion_point(field_set:ExternSensorConfig.Config_Mode_fan.fan_enable)
}

// float vaule_open = 3;
inline void ExternSensorConfig_Config_Mode_fan::clear_vaule_open() {
  vaule_open_ = 0;
}
inline float ExternSensorConfig_Config_Mode_fan::vaule_open() const {
  // @@protoc_insertion_point(field_get:ExternSensorConfig.Config_Mode_fan.vaule_open)
  return vaule_open_;
}
inline void ExternSensorConfig_Config_Mode_fan::set_vaule_open(float value) {
  
  vaule_open_ = value;
  // @@protoc_insertion_point(field_set:ExternSensorConfig.Config_Mode_fan.vaule_open)
}

// float vaule_close = 4;
inline void ExternSensorConfig_Config_Mode_fan::clear_vaule_close() {
  vaule_close_ = 0;
}
inline float ExternSensorConfig_Config_Mode_fan::vaule_close() const {
  // @@protoc_insertion_point(field_get:ExternSensorConfig.Config_Mode_fan.vaule_close)
  return vaule_close_;
}
inline void ExternSensorConfig_Config_Mode_fan::set_vaule_close(float value) {
  
  vaule_close_ = value;
  // @@protoc_insertion_point(field_set:ExternSensorConfig.Config_Mode_fan.vaule_close)
}

// float Ctrl_switch = 5;
inline void ExternSensorConfig_Config_Mode_fan::clear_ctrl_switch() {
  ctrl_switch_ = 0;
}
inline float ExternSensorConfig_Config_Mode_fan::ctrl_switch() const {
  // @@protoc_insertion_point(field_get:ExternSensorConfig.Config_Mode_fan.Ctrl_switch)
  return ctrl_switch_;
}
inline void ExternSensorConfig_Config_Mode_fan::set_ctrl_switch(float value) {
  
  ctrl_switch_ = value;
  // @@protoc_insertion_point(field_set:ExternSensorConfig.Config_Mode_fan.Ctrl_switch)
}

// -------------------------------------------------------------------

// ExternSensorConfig

// int32 Led_Color = 1;
inline void ExternSensorConfig::clear_led_color() {
  led_color_ = 0;
}
inline ::google::protobuf::int32 ExternSensorConfig::led_color() const {
  // @@protoc_insertion_point(field_get:ExternSensorConfig.Led_Color)
  return led_color_;
}
inline void ExternSensorConfig::set_led_color(::google::protobuf::int32 value) {
  
  led_color_ = value;
  // @@protoc_insertion_point(field_set:ExternSensorConfig.Led_Color)
}

// repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
inline int ExternSensorConfig::config_fan_msg_size() const {
  return config_fan_msg_.size();
}
inline void ExternSensorConfig::clear_config_fan_msg() {
  config_fan_msg_.Clear();
}
inline ::ExternSensorConfig_Config_Mode_fan* ExternSensorConfig::mutable_config_fan_msg(int index) {
  // @@protoc_insertion_point(field_mutable:ExternSensorConfig.Config_fan_Msg)
  return config_fan_msg_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ExternSensorConfig_Config_Mode_fan >*
ExternSensorConfig::mutable_config_fan_msg() {
  // @@protoc_insertion_point(field_mutable_list:ExternSensorConfig.Config_fan_Msg)
  return &config_fan_msg_;
}
inline const ::ExternSensorConfig_Config_Mode_fan& ExternSensorConfig::config_fan_msg(int index) const {
  // @@protoc_insertion_point(field_get:ExternSensorConfig.Config_fan_Msg)
  return config_fan_msg_.Get(index);
}
inline ::ExternSensorConfig_Config_Mode_fan* ExternSensorConfig::add_config_fan_msg() {
  // @@protoc_insertion_point(field_add:ExternSensorConfig.Config_fan_Msg)
  return config_fan_msg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ExternSensorConfig_Config_Mode_fan >&
ExternSensorConfig::config_fan_msg() const {
  // @@protoc_insertion_point(field_list:ExternSensorConfig.Config_fan_Msg)
  return config_fan_msg_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ExternSensorConfig_2eproto
